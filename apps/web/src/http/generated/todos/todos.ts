/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Todo list
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DeleteTodosId200,
  GetTodos200Item,
  GetTodosId200,
  PatchTodosId200,
  PatchTodosIdBody,
  PostTodos200,
  PostTodosBody,
  PutTodosId200,
  PutTodosIdBody
} from '../api.schemas'
import getTodosMutator from '../../../libs/axios';
import type { ErrorType as GetTodosErrorType } from '../../../libs/axios';
import postTodosMutator from '../../../libs/axios';
import type { ErrorType as PostTodosErrorType } from '../../../libs/axios';
import getTodosIdMutator from '../../../libs/axios';
import type { ErrorType as GetTodosIdErrorType } from '../../../libs/axios';
import patchTodosIdMutator from '../../../libs/axios';
import type { ErrorType as PatchTodosIdErrorType } from '../../../libs/axios';
import putTodosIdMutator from '../../../libs/axios';
import type { ErrorType as PutTodosIdErrorType } from '../../../libs/axios';
import deleteTodosIdMutator from '../../../libs/axios';
import type { ErrorType as DeleteTodosIdErrorType } from '../../../libs/axios';



export const getTodos = (
    
 signal?: AbortSignal
) => {
      
      
      return getTodosMutator<GetTodos200Item[]>(
      {url: `http://localhost:3333/todos`, method: 'GET', signal
    },
      );
    }
  

export const getGetTodosQueryKey = () => {
    return [`http://localhost:3333/todos`] as const;
    }

    
export const getGetTodosQueryOptions = <TData = Awaited<ReturnType<typeof getTodos>>, TError = GetTodosErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTodosQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodos>>> = ({ signal }) => getTodos(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getTodos>>>
export type GetTodosQueryError = GetTodosErrorType<unknown>


export function useGetTodos<TData = Awaited<ReturnType<typeof getTodos>>, TError = GetTodosErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodos>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTodos<TData = Awaited<ReturnType<typeof getTodos>>, TError = GetTodosErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodos>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTodos<TData = Awaited<ReturnType<typeof getTodos>>, TError = GetTodosErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetTodos<TData = Awaited<ReturnType<typeof getTodos>>, TError = GetTodosErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTodosQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postTodos = (
    postTodosBody: PostTodosBody,
 signal?: AbortSignal
) => {
      
      
      return postTodosMutator<PostTodos200>(
      {url: `http://localhost:3333/todos`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTodosBody, signal
    },
      );
    }
  


export const getPostTodosMutationOptions = <TError = PostTodosErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTodos>>, TError,{data: PostTodosBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postTodos>>, TError,{data: PostTodosBody}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTodos>>, {data: PostTodosBody}> = (props) => {
          const {data} = props ?? {};

          return  postTodos(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTodosMutationResult = NonNullable<Awaited<ReturnType<typeof postTodos>>>
    export type PostTodosMutationBody = PostTodosBody
    export type PostTodosMutationError = PostTodosErrorType<unknown>

    export const usePostTodos = <TError = PostTodosErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTodos>>, TError,{data: PostTodosBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postTodos>>,
        TError,
        {data: PostTodosBody},
        TContext
      > => {

      const mutationOptions = getPostTodosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getTodosId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return getTodosIdMutator<GetTodosId200>(
      {url: `http://localhost:3333/todos/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTodosIdQueryKey = (id: string,) => {
    return [`http://localhost:3333/todos/${id}`] as const;
    }

    
export const getGetTodosIdQueryOptions = <TData = Awaited<ReturnType<typeof getTodosId>>, TError = GetTodosIdErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodosId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTodosIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodosId>>> = ({ signal }) => getTodosId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTodosId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTodosIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTodosId>>>
export type GetTodosIdQueryError = GetTodosIdErrorType<unknown>


export function useGetTodosId<TData = Awaited<ReturnType<typeof getTodosId>>, TError = GetTodosIdErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodosId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodosId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTodosId<TData = Awaited<ReturnType<typeof getTodosId>>, TError = GetTodosIdErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodosId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodosId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTodosId<TData = Awaited<ReturnType<typeof getTodosId>>, TError = GetTodosIdErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodosId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetTodosId<TData = Awaited<ReturnType<typeof getTodosId>>, TError = GetTodosIdErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodosId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTodosIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const patchTodosId = (
    id: string,
    patchTodosIdBody: PatchTodosIdBody,
 ) => {
      
      
      return patchTodosIdMutator<PatchTodosId200>(
      {url: `http://localhost:3333/todos/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchTodosIdBody
    },
      );
    }
  


export const getPatchTodosIdMutationOptions = <TError = PatchTodosIdErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchTodosId>>, TError,{id: string;data: PatchTodosIdBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchTodosId>>, TError,{id: string;data: PatchTodosIdBody}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchTodosId>>, {id: string;data: PatchTodosIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  patchTodosId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchTodosId>>>
    export type PatchTodosIdMutationBody = PatchTodosIdBody
    export type PatchTodosIdMutationError = PatchTodosIdErrorType<unknown>

    export const usePatchTodosId = <TError = PatchTodosIdErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchTodosId>>, TError,{id: string;data: PatchTodosIdBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof patchTodosId>>,
        TError,
        {id: string;data: PatchTodosIdBody},
        TContext
      > => {

      const mutationOptions = getPatchTodosIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const putTodosId = (
    id: string,
    putTodosIdBody: PutTodosIdBody,
 ) => {
      
      
      return putTodosIdMutator<PutTodosId200>(
      {url: `http://localhost:3333/todos/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putTodosIdBody
    },
      );
    }
  


export const getPutTodosIdMutationOptions = <TError = PutTodosIdErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTodosId>>, TError,{id: string;data: PutTodosIdBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putTodosId>>, TError,{id: string;data: PutTodosIdBody}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTodosId>>, {id: string;data: PutTodosIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putTodosId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTodosId>>>
    export type PutTodosIdMutationBody = PutTodosIdBody
    export type PutTodosIdMutationError = PutTodosIdErrorType<unknown>

    export const usePutTodosId = <TError = PutTodosIdErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTodosId>>, TError,{id: string;data: PutTodosIdBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putTodosId>>,
        TError,
        {id: string;data: PutTodosIdBody},
        TContext
      > => {

      const mutationOptions = getPutTodosIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const deleteTodosId = (
    id: string,
 ) => {
      
      
      return deleteTodosIdMutator<DeleteTodosId200>(
      {url: `http://localhost:3333/todos/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteTodosIdMutationOptions = <TError = DeleteTodosIdErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTodosId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteTodosId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTodosId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteTodosId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTodosId>>>
    
    export type DeleteTodosIdMutationError = DeleteTodosIdErrorType<unknown>

    export const useDeleteTodosId = <TError = DeleteTodosIdErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTodosId>>, TError,{id: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTodosId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteTodosIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    